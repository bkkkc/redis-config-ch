```
# Redis configuration file example.
# Redis 配置文件示例
#
# Note that in order to read the configuration file, Redis must be
# started with the file path as first argument:
# 注意，为了能让redis使用指定的配置文件，
# 必须将配置文件地址作为redis启动的第一个参数
#
# ./redis-server /path/to/redis.conf

# Note on units: when memory size is needed, it is possible to specify
# it in the usual form of 1k 5GB 4M and so forth:
# Redis配置中一些单位的使用注意事项：当需要指明内存大小的时候，可以通过一些常见的方式指定，
# 比如1k 5GB 4M等等诸如此类的形式。
#
# 1k => 1000 bytes
# 1kb => 1024 bytes
# 1m => 1000000 bytes
# 1mb => 1024*1024 bytes
# 1g => 1000000000 bytes
# 1gb => 1024*1024*1024 bytes
# //注意带b与不带b的区别，一个是十进制，一个二进制
#
# units are case insensitive so 1GB 1Gb 1gB are all the same.
# 单位是大小写不敏感的，所以1GB 1Gb 1gB都是一样的。
################################## INCLUDES ###################################

# Include one or more other config files here.  This is useful if you
# have a standard template that goes to all Redis servers but also need
# to customize a few per-server settings.  Include files can include
# other files, so use this wisely.
# 在这里指定一份或多份配置文件。
# //实际工作中，我们可能需要部署很多redis服务，有些配置是
# //固定的，比如占用端口等，有些则是根据服务单独配置的。
# 可以为所有redis服务配置一个标准的模板配置，如果一些redis服务需要自定义配置，只需要在另一个配置文件中
# 指定这些配置就可以了。配置文件中还可以嵌套其他的配置文件，所以想想怎么可以更好使用这个特性。
#
# Notice option "include" won't be rewritten by command "CONFIG REWRITE"
# from admin or Redis Sentinel. Since Redis always uses the last processed
# line as value of a configuration directive, you'd better put includes
# at the beginning of this file to avoid overwriting config change at runtime.
# 注意，"include"中的配置文件不会被amdin或redis哨兵的"CONFIG REWRITE"命令重写，因为假如多个配置文件中
# 都指明了某项配置(比如redis监听端口),那么redis只会使用最后一次出现的配置项。所以，最好将包含的这些配置
# 文件放在该配置文件的最前面，避免在redis运行期间被修改。
#
# If instead you are interested in using includes to override configuration
# options, it is better to use include as the last line.
# 相反，如果你想用include的配置文件来覆盖之前配置项，可以将include放到最后一行
#
# include /path/to/local.conf
# include /path/to/other.conf

################################## MODULES #####################################

# Load modules at startup. If the server is not able to load modules
# it will abort. It is possible to use multiple loadmodule directives.
# //不晓得，，只知道他的意思是指定动态链接库，不知道为啥要指定，可以用来干什么
# loadmodule /path/to/my_module.so
# loadmodule /path/to/other_module.so

################################## NETWORK #####################################

# By default, if no "bind" configuration directive is specified, Redis listens
# for connections from all the network interfaces available on the server.
# It is possible to listen to just one or multiple selected interfaces using
# the "bind" configuration directive, followed by one or more IP addresses.
#
# 默认情况下，如果没有指定"bind"配置，redis将会监听所有网络接口。
# 当然，也可以通过"bind"指明想要将听的一个或多个接口。
# Examples:
#
# bind 192.168.1.100 10.0.0.1
# bind 127.0.0.1 ::1
#
# ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the
# internet, binding to all the interfaces is dangerous and will expose the
# instance to everybody on the internet. So by default we uncomment the
# following bind directive, that will force Redis to listen only into
# the IPv4 loopback interface address (this means Redis will be able to
# accept connections only from clients running into the same computer it
# is running).
# ~~~留点神~~~，如果计算机直接暴露在公网下，绑定所有网络接口是十分危险的，这将把redis服务
# 暴露给互联网上的所有人。所以，我们在下面取消了对bind的注释，这能够强制redis指监听本定的IPv4
# 回环地址（这意味着redis仅会接受来之运行redis服务的这台计算机上的连接请求）
#
# IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES
# JUST COMMENT THE FOLLOWING LINE.
# //语气严肃//如果你确定你要让你的redis服务监听所有网络接口，你就把下面这行注释掉吧！！！
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bind 127.0.0.1

# Protected mode is a layer of security protection, in order to avoid that
# Redis instances left open on the internet are accessed and exploited.
# 保护模式一个安全保护层，目的是为了避免redis服务实例被互联网上的其他人访问或者利用。
# When protected mode is on and if:
# 当保护模式打开，同时
# 1) The server is not binding explicitly to a set of addresses using the
#    "bind" directive.
# 1) 服务没有通过"bind"绑定监听的地址
# 2) No password is configured.
# 2) 密码没有设置
#
# The server only accepts connections from clients connecting from the
# IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain
# sockets.
# 服务将只会接受来自IPv4,IPv6的本地回环地址127.0.0.1和::1，还有Unix套接字的连接。
# 
# By default protected mode is enabled. You should disable it only if
# you are sure you want clients from other hosts to connect to Redis
# even if no authentication is configured, nor a specific set of interfaces
# are explicitly listed using the "bind" directive.
# 保护模式默认是打开的。你也可以关闭它，前提是你确定即使密码授权没有配置或者有些网络接口没有通过"bind"指定，
# 其他主机的客户端也可以连接进来。
# 
protected-mode yes

# Accept connections on the specified port, default is 6379 (IANA #815344).
# If port 0 is specified Redis will not listen on a TCP socket.
# Redis服务监听的端口，默认6379,
# 如果port是0,那么redis将不会通过TCP套接字监听。
port 6379

# TCP listen() backlog.
# TCP listen() 待处理队列大小
# In high requests-per-second environments you need an high backlog in order
# to avoid slow clients connections issues. Note that the Linux kernel
# will silently truncate it to the value of /proc/sys/net/core/somaxconn so
# make sure to raise both the value of somaxconn and tcp_max_syn_backlog
# in order to get the desired effect.
# 在高访问量的环境下，你需要把backlog配置的大一些，避免因为一些网络差的连接产生问题。注意，linux内核
# 默认会将连接数限制在/proc/sys/net/core/somaxconn文件中指定的值下，所以，要同时将somaxconn和
# tcp_max_syn_backlog改大些，才能达到期望的效果.
# //tcp_max_sync_backlog(在/proc/sys/net/ipv4/tcp_max_syn_backlog)指定的是带处理的建立连接的
# //请求队列大小，somaxconn指定的是已经建立的
# //连接的数目大小，一般tcp_max_sync_backlog可以设置的比somaxconn大些，我的ubuntu下somaxconn默认
# //是128,tcp_max_sync_backlog默认是512,阿里云服务器上这两个值都是10000.

tcp-backlog 511

# Unix socket.
# Unix套接字
#
# Specify the path for the Unix socket that will be used to listen for
# incoming connections. There is no default, so Redis will not listen
# on a unix socket when not specified.
# 指明监听的Unix套接字的路径，这个选项没有默认值，所以当你没有指明这个配置项时Redis是
# 不会将听Unix套接字的。
#
# unixsocket /tmp/redis.sock
# unixsocketperm 700

# Close the connection after a client is idle for N seconds (0 to disable)
# 当客户端连接空闲多少秒后就断开这个连接（０表示啥时候都不断开）
timeout 0

# TCP keepalive.
# TCP保活
# 
# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence
# of communication. This is useful for two reasons:
# 如果不是0，Redis服务会发送SO_KEEPALIVE(TCP协议中的心跳，4层，非7层自己实现的)到那些
# 连接处于空闲状态的客户端，这样做有两个原因： 
#
# 1) Detect dead peers.
# 1) 探测有哪些客户端失活
# 2) Take the connection alive from the point of view of network
#    equipment in the middle.
# 2) 使Redis服务与客户端连接的中间设备保持该连接不被关闭（日常中路由器的NAPT列表，防火墙对于长时间不用
#    的连接可能会回收）
#
# On Linux, the specified value (in seconds) is the period used to send ACKs.
# Note that to close the connection the double of the time is needed.
# On other kernels the period depends on the kernel configuration.
# 在Linux平台上，指定的值（以秒为单位）是发送ACK的周期。需要注意，对于失活连接，需要
# 经过两个周期的探测才能确定哪些连接失活，需要断开。
#
# A reasonable value for this option is 300 seconds, which is the new
# Redis default starting with Redis 3.2.1.
# 该选项的建议值是300秒，也是Redis 3.2.1及后续版本中的默认值。
tcp-keepalive 300

################################# GENERAL #####################################

# By default Redis does not run as a daemon. Use 'yes' if you need it.
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
# 默认情况下Redis并不会以后台进程的形式运行，如果需要的话，指定下面的配置项为yes。
# 注意，如果Redis以后台进程形式运行的话会在/var/run/redis.pid里写入redis进程的pid
daemonize no

# If you run Redis from upstart or systemd, Redis can interact with your
# supervision tree. Options:
#   supervised no      - no supervision interaction
#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode
#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET
#   supervised auto    - detect upstart or systemd method based on
#                        UPSTART_JOB or NOTIFY_SOCKET environment variables
# Note: these supervision methods only signal "process is ready."
#       They do not enable continuous liveness pings back to your supervisor.
# 如果你想通过upstart或者systemd启动redis,redis提供了与这些管理工具的交互
# supervised no        - 不使用任何管理工具
# supervised upstart   - 使用upstart管理
# supervised systemd   - 使用systemd管理
# supervised auto      - 根据系统中UPSTART_JOB 或 NOTIFY_SOCKET这两个环境变量自动确定使用upstart还是systemd
supervised no

# If a pid file is specified, Redis writes it where specified at startup
# and removes it at exit.
# 如果指定了pid文件，redis将会在启动的时候将信息写入指定的pid文件，并在退出时删除这个文件
#
# When the server runs non daemonized, no pid file is created if none is
# specified in the configuration. When the server is daemonized, the pid file
# is used even if not specified, defaulting to "/var/run/redis.pid".
# 当Redis服务不是以后台进程的形式运行时，如果不指定pid文件的话，redis服务不会将pid信息写入到
# 任何文件中。当redis服务是以后台进程运行时，即使配置中没有指明，redis也会将pid写入文件，默认是
# /var/run/redis.pid。
#
# Creating a pid file is best effort: if Redis is not able to create it
# nothing bad happens, the server will start and run normally.
# 应该尽量去创建pid文件:如果你的Redis无法创建这个文件的话也不会产生什么坏的影响，
# 服务还是会正常启动/运行。
pidfile /var/run/redis_6379.pid

# Specify the server verbosity level.
# This can be one of:
# debug (a lot of information, useful for development/testing)
# verbose (many rarely useful info, but not a mess like the debug level)
# notice (moderately verbose, what you want in production probably)
# warning (only very important / critical messages are logged)
# 指定Redis服务的输出级别（日志）
# 有以下几种级别可选：
# debug (会输出很多信息，对开发或测试阶段来说很有用)
# verbose (有用的信息比较少，但是比debug强)
# notice (适当的输出一些信息，建议生产环境中使用该级别)
# warning (只有非常重要的或者决定性的信息)
loglevel notice

# Specify the log file name. Also the empty string can be used to force
# Redis to log on the standard output. Note that if you use standard
# output for logging but daemonize, logs will be sent to /dev/null
# 指定日志文件的名称。如果是空字符串的话，会强制Redis将log输出到标准输出中。注意，如果
# Redis服务是以后台进程形式运行，而且又指定log输出到标准输出中，那么log将会输出到/dev/null中
logfile ""

# To enable logging to the system logger, just set 'syslog-enabled' to yes,
# and optionally update the other syslog parameters to suit your needs.
# 要是希望日志输入到系统日志syslog中，仅需要将下面的syslog-enabled设置为yes就可以了,
# 而且根据需要更新其他的syslog的参数 
# syslog-enabled no

# Specify the syslog identity.
# Redis服务日志在系统日志中标识
# syslog-ident redis

# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.
# 指定syslog facility，必须是USER或LOCAL0到LOCAL7中的。
# syslog-facility local0

# Set the number of databases. The default database is DB 0, you can select
# a different one on a per-connection basis using SELECT <dbid> where
# dbid is a number between 0 and 'databases'-1
# 设定Redis服务中的数据库数量.默认使用的数据库是DB 0,你也可以在连接中通过SELECT <dbid>选择不同
# 的数据库，<dbid>应该大于等0 并且 小于等于'databases'-1
databases 16

# By default Redis shows an ASCII art logo only when started to log to the
# standard output and if the standard output is a TTY. Basically this means
# that normally a logo is displayed only in interactive sessions.
# 
# However it is possible to force the pre-4.0 behavior and always show a
# ASCII art logo in startup logs by setting the following option to yes.
# 要不要在服务启动时在输出中显示redis的log
always-show-logo yes

################################ SNAPSHOTTING  ################################
# 快照
# Save the DB on disk:
# 在硬盘中保存DB
#   save <seconds> <changes>
#
#   Will save the DB if both the given number of seconds and the given
#   number of write operations against the DB occurred.
#   指定redis服务多少秒内有多少次写操作后保存一次数据库
#
#   In the example below the behaviour will be to save:
#   after 900 sec (15 min) if at least 1 key changed
#   after 300 sec (5 min) if at least 10 keys changed
#   after 60 sec if at least 10000 keys changed
#   下面的示例中当满足下述条件时将会保存数据库：
#   900秒内至少有1个key改变
#   300秒内至少有10个key改变
#   60秒内至少有10000个key改变
#   
#   Note: you can disable saving completely by commenting out all "save" lines.
#   注意：你可通过注销配置中所有的"save"行来禁止保存DB到硬盘。
#
#   It is also possible to remove all the previously configured save
#   points by adding a save directive with a single empty string argument
#   like in the following example:
#   也可以通过在所有的save后添加save ""来禁用之前所有的save配置。
#   save ""

save 900 1
save 300 10
save 60 10000

# By default Redis will stop accepting writes if RDB snapshots are enabled
# (at least one save point) and the latest background save failed.
# This will make the user aware (in a hard way) that data is not persisting
# on disk properly, otherwise chances are that no one will notice and some
# disaster will happen.
# 默认情况下，如果RDB快照功能开启且在保存过程中出现失败那么redis将会拒绝接收写请求。
# 这么做，能在数据持久化到硬盘出现问题时让用户第一时间得知（好硬核的方式），否则持久化
# 失败了都没人知道，可能导致一些灾难发生
#
# If the background saving process will start working again Redis will
# automatically allow writes again.
# 当后台的保存进程恢复后，redis将会自动开始接收写请求
#
# However if you have setup your proper monitoring of the Redis server
# and persistence, you may want to disable this feature so that Redis will
# continue to work as usual even if there are problems with disk,
# permissions, and so forth.
# 然而，如果你有针对redis服务或者持久化的一些监控的话，你也许想关闭这个功能，这样
# 即使发生硬盘坏掉，没有权限等等类似的情况，Redis也将会继续正常工作，
stop-writes-on-bgsave-error yes

# Compress string objects using LZF when dump .rdb databases?
# For default that's set to 'yes' as it's almost always a win.
# If you want to save some CPU in the saving child set it to 'no' but
# the dataset will likely be bigger if you have compressible values or keys.
# 当dump .rdb数据库时是否要用LZF压缩字符串对象？
# 默认设置是yes,因为通常这个选择更好。
# 如果你想在保存子进程中节省些CPU资源，那么把这个配置设置为no,但是dump后的数据将会比用压缩的方式大。
rdbcompression yes

# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.
# This makes the format more resistant to corruption but there is a performance
# hit to pay (around 10%) when saving and loading RDB files, so you can disable it
# for maximum performances.
# 从RDB5之后的版本开始，dump文件的最后会加一个CRC64的校验码，这样可以更好的对抗数据格式出现损坏的情况，但是
# 这也会对保存和载入RDB文件时产生大约10%的性能影响,所以你也可以禁用这个配置以获得最好的性能。
#
# RDB files created with checksum disabled have a checksum of zero that will
# tell the loading code to skip the check.
# 禁用掉checksum生成的RDB文件将会用0填充原来应该有的checksum,这样可以告诉加载RDB文件的代码
# 跳过checksum的校验
rdbchecksum yes

# The filename where to dump the DB
# dump数据库的文件名
dbfilename dump.rdb

# The working directory.
# 工作目录
#
# The DB will be written inside this directory, with the filename specified
# above using the 'dbfilename' configuration directive.
# 数据库文件将会以上述'dbfilename'中指定的名字保存在这个目录下.
#
# The Append Only File will also be created inside this directory.
# AOF文件也会在这个目录下保存。
#
# Note that you must specify a directory here, not a file name.
# 注意，你在这里指定的必须是文件夹，而不是文件名 
dir ./

################################# REPLICATION #################################
# 副本
# Master-Replica replication. Use replicaof to make a Redis instance a copy of
# another Redis server. A few things to understand ASAP about Redis replication.
# 主从复制。使用replicaof配置可以让一个Redis服务实例成为另一个Redis服务的复制。下面是一些
# 应该尽快知道的关于redis副本的事情。
#   +------------------+      +---------------+
#   |      Master      | ---> |    Replica    |
#   | (receive writes) |      |  (exact copy) |
#   +------------------+      +---------------+
#
# 1) Redis replication is asynchronous, but you can configure a master to
#    stop accepting writes if it appears to be not connected with at least
#    a given number of replicas.
# 1) Redis的复制是异步的，但是你可以通过配置使得当没有任何副本连接进来时，redis主库拒绝
#    接受写请求。
# 2) Redis replicas are able to perform a partial resynchronization with the
#    master if the replication link is lost for a relatively small amount of
#    time. You may want to configure the replication backlog size (see the next
#    sections of this file) with a sensible value depending on your needs.
# 2) 当从库与主库连接断开时间相对较小时，主从库可能会采用部分重同步的方式。你也许想根据自己的
#    需要自己配置待复制队列的大小（本文件下一小节会讲到）
# 3) Replication is automatic and does not need user intervention. After a
#    network partition replicas automatically try to reconnect to masters
#    and resynchronize with them.
# 3) 复制的过程是自动的，不需要人工介入。当网络出现故障时，从库会自动重试连接到主库，从主库进行重新同步。
#
# replicaof <masterip> <masterport>

# If the master is password protected (using the "requirepass" configuration
# directive below) it is possible to tell the replica to authenticate before
# starting the replication synchronization process, otherwise the master will
# refuse the replica request.
# 如果主库设置了密码保护（通过下方的"requirepass"配置设置）,可能需要告诉从库在主从同步前进行授权,
# 否则主库会拒绝复制请求。 
# masterauth <master-password>

# When a replica loses its connection with the master, or when the replication
# is still in progress, the replica can act in two different ways:
# 当一个副本断开了与主库的连接，或者当复制过程在进行的时候，副本根据配置会有两种不同的工作方式：
# 1) if replica-serve-stale-data is set to 'yes' (the default) the replica will
#    still reply to client requests, possibly with out of date data, or the
#    data set may just be empty if this is the first synchronization.
# 1) 当replica-serve-stable-data被设置为'yes'(默认配置),即使副本的数据可能是过期的，或者
#    当第一次从主库同步，数据还是空的，副本也会响应客户端的请求。
# 
# 2) if replica-serve-stale-data is set to 'no' the replica will reply with
#    an error "SYNC with master in progress" to all the kind of commands
#    but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,
#    SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,
#    COMMAND, POST, HOST: and LATENCY.
# 2) 如果replica-serve-stable-data被设置为'no'，副本所有类型（除INFO,replicaOF,AUTH等请求）的请求时都会回复
#    “SYNC with master in progress”
#    
replica-serve-stale-data yes

# You can configure a replica instance to accept writes or not. Writing against
# a replica instance may be useful to store some ephemeral data (because data
# written on a replica will be easily deleted after resync with the master) but
# may also cause problems if clients are writing to it because of a
# misconfiguration.
# 你也可以设置一个redis副本是否接受写请求。在一个副本上写数据可能是有用的，比如存放一些临时的数据（
# 因为写在副本上的数据可以通过从master的再次同步轻松的删除），但是也有可能是客户端因为配置错误才写到
# 副本，这样可能会引发一些问题。
#
# Since Redis 2.6 by default replicas are read-only.
# 从Redis 2.6后，副本默认都是只读的。
#
# Note: read only replicas are not designed to be exposed to untrusted clients
# on the internet. It's just a protection layer against misuse of the instance.
# Still a read only replica exports by default all the administrative commands
# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve
# security of read only replicas using 'rename-command' to shadow all the
# administrative / dangerous commands.
# 注意：只读的副本并不是被设计为用来暴露给互联网上不受信任的客户端的。它仅仅是一个避免使用错误的实例的保护。
# 而且，对于副本，一些管理类的命令依然是可用的，比如CONFIG,DEBUG等等类似的。你也可以通过'rename-command'的
# 方式隐藏掉一些管理类的或者危险的命令，以提高只读副本的安全性。
replica-read-only yes

# Replication SYNC strategy: disk or socket.
# 复制同步策略：磁盘或者套接字。
# -------------------------------------------------------
# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY
# -------------------------------------------------------
# 注意：无盘复制目前还在实验阶段
#
# New replicas and reconnecting replicas that are not able to continue the replication
# process just receiving differences, need to do what is called a "full
# synchronization". An RDB file is transmitted from the master to the replicas.
# The transmission can happen in two different ways:
# 新副本或者那些重新连接后无法继续进行同步的副本（有些断开时间较短的副本还是可以同步的），需要进行一个叫做
# 全量同步的操作。一个RDB文件将会从主库传到副本上，传送有两种不同的方式:
#
# 1) Disk-backed: The Redis master creates a new process that writes the RDB
#                 file on disk. Later the file is transferred by the parent
#                 process to the replicas incrementally.
# 1) 基于硬盘：Redis主库会创建一个新的进程用来将RDB文件写到磁盘上。后续这个文件会被父进程递增的同步
#            到副本上。
# 2) Diskless: The Redis master creates a new process that directly writes the
#              RDB file to replica sockets, without touching the disk at all.
# 2) 无盘：Redis主库会创建一个新的进程，该进程会直接将RDB文件写入副本的连接套接字中，不会涉及到硬盘。
#
# With disk-backed replication, while the RDB file is generated, more replicas
# can be queued and served with the RDB file as soon as the current child producing
# the RDB file finishes its work. With diskless replication instead once
# the transfer starts, new replicas arriving will be queued and a new transfer
# will start when the current one terminates.
# 如果选择基于硬盘的方式，当RDB文件生成时，更多的副本同步请求会被排入队列，并且当生成RDB文件的子进程结束时就会
# 尽快通过RDB文件的方式进行同步处理。但使用无盘方式时，一旦同步开始了，新进来的副本同步将会被排入队列，直到
# 当前的同步传输结束时，才会开始一次新的传输。 
#
# When diskless replication is used, the master waits a configurable amount of
# time (in seconds) before starting the transfer in the hope that multiple replicas
# will arrive and the transfer can be parallelized.
# 当使用无盘复制时，主库可以在一次同步传输开始前设置一个等待时间（以秒为单位），以可以让更多即将接入的
# 副本参与进来，这样，传输就是并行的了。
#
# With slow disks and fast (large bandwidth) networks, diskless replication
# works better.
# 当主库的硬盘很慢但是网络很快(大带宽)时，无盘复制工作的更好。
repl-diskless-sync no

# When diskless replication is enabled, it is possible to configure the delay
# the server waits in order to spawn the child that transfers the RDB via socket
# to the replicas.
# 当设置为无盘复制时，可以设置一个让Redis服务中通过套接字进行副本同步传输的套接字挂起的延时。
#
# This is important since once the transfer starts, it is not possible to serve
# new replicas arriving, that will be queued for the next RDB transfer, so the server
# waits a delay in order to let more replicas arrive.
# 有一点是非常重要的，一旦同步传输开始，将不可能受理新的副本同步请求，新的请求将会被排入队列以等待下次的
# RDB传输，所以主库可以设置一个延迟来让更多的副本同步请求进来从而并行处理。
#
# The delay is specified in seconds, and by default is 5 seconds. To disable
# it entirely just set it to 0 seconds and the transfer will start ASAP.
# 延迟时间以秒为单位，默认是5秒.如果想要禁用延迟，可以将其设置为0,这样同步传输将会尽快开始。
repl-diskless-sync-delay 5

# Replicas send PINGs to server in a predefined interval. It's possible to change
# this interval with the repl_ping_replica_period option. The default value is 10
# seconds.
# 副本会以预设的间隔定期向主库发送PING。可以通过更改repl_ping_replica_period选项来更改发送PING间隔，
# 默认值是10秒。
#
# repl-ping-replica-period 10

# The following option sets the replication timeout for:
# 下方的选项将会设置复制中以下几种情况的超时：
#
# 1) Bulk transfer I/O during SYNC, from the point of view of replica.
# 2) Master timeout from the point of view of replicas (data, pings).
# 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).
# 1) slave角度，如果在repl-timeout时间内没有收到master SYNC传输的rdb snapshot数据
# 2) slave角度，在repl-timeout没有收到master发送的数据包或者ping
# 3) master角度，在repl-timeout时间没有收到REPCONF ACK确认信息
#
# It is important to make sure that this value is greater than the value
# specified for repl-ping-replica-period otherwise a timeout will be detected
# every time there is low traffic between the master and the replica.
# 重要！！确保设定的repl-timeout大于repl-ping-replica-period,否则每次ping还没发过来就被认为
# 是超时了。
#
# repl-timeout 60

# Disable TCP_NODELAY on the replica socket after SYNC?
# 是否在副本socket在同步时关闭TCP_NODELAY？
#
# If you select "yes" Redis will use a smaller number of TCP packets and
# less bandwidth to send data to replicas. But this can add a delay for
# the data to appear on the replica side, up to 40 milliseconds with
# Linux kernels using a default configuration.
# 如果是"yes"，Redis将会通过更少的TCP包更低的带宽来给副本发送数据。但是这将会增加副本方的
# 数据延迟，如果Linux内核使用默认的是默认值的話，延迟最多40毫秒。
#
# If you select "no" the delay for data to appear on the replica side will
# be reduced but more bandwidth will be used for replication.
# 如果是"no",到达副本的数据延迟将被降低，但是复制过程中将会使用更多的带宽。
# 
# By default we optimize for low latency, but in very high traffic conditions
# or when the master and replicas are many hops away, turning this to "yes" may
# be a good idea.
# 默认设置以低延迟为目标，但是如果网络很繁忙，或者主库与副本之间的距离很远，将该选线配置为"yes"
# 或许是更好的选择。
repl-disable-tcp-nodelay no

# Set the replication backlog size. The backlog is a buffer that accumulates
# replica data when replicas are disconnected for some time, so that when a replica
# wants to reconnect again, often a full resync is not needed, but a partial
# resync is enough, just passing the portion of data the replica missed while
# disconnected.
# 设置待复制数据队列大小。数据队列是一段缓存，当副本断开时，用来积累待复制的数据，这样当副本
# 重新连接进来的时候，通常并不需要一次全量的复制，部分复制就够了，仅需要传输那部分副本断开期间
# 的数据就可以了
#
# The bigger the replication backlog, the longer the time the replica can be
# disconnected and later be able to perform a partial resynchronization.
# 待复制数据队列设置的越大，能够容忍的副本断开的时间越长，当再次连接时还可以使用部分同步。
#
# The backlog is only allocated once there is at least a replica connected.
# 待复制数据队列仅在至少有一个副本连接进来时才会分配。
#
# repl-backlog-size 1mb

# After a master has no longer connected replicas for some time, the backlog
# will be freed. The following option configures the amount of seconds that
# need to elapse, starting from the time the last replica disconnected, for
# the backlog buffer to be freed.
# 主库长时间没有副本连接的时候，backlog将会释放。下方的选线可以配置当最后一个副本断开连接后
# 多少秒内没有连接进来backlog被释放。
# 
# Note that replicas never free the backlog for timeout, since they may be
# promoted to masters later, and should be able to correctly "partially
# resynchronize" with the replicas: hence they should always accumulate backlog.
# 注意：副本永远不会因为timeout释放backlog，因为他们可能稍后被推为master，这样才能正确同其他
# 副本进行部分重同步。因此副本应该一直累计backlog
#
# A value of 0 means to never release the backlog.
# 设置为0表示永不释放backlog
#
# repl-backlog-ttl 3600

# The replica priority is an integer number published by Redis in the INFO output.
# It is used by Redis Sentinel in order to select a replica to promote into a
# master if the master is no longer working correctly.
# 副本的优先级是一个整数。被Redis Sentinel用来决定当主库不能正常工作时应该选取哪个副本作为主库。
#
# A replica with a low priority number is considered better for promotion, so
# for instance if there are three replicas with priority 10, 100, 25 Sentinel will
# pick the one with priority 10, that is the lowest.
# 一个副本如果优先级越低，那么越有可能被推为主库，所以如果有三个副本优先级分别为10,100，25,那么
# Sentinel将会选择优先级为10的作为主库，因为它的优先级最低。
#
# However a special priority of 0 marks the replica as not able to perform the
# role of master, so a replica with priority of 0 will never be selected by
# Redis Sentinel for promotion.
# 然而，0优先级代表着这个副本不能承担主库的角色，所以一个优先级为0的副本永远不会被Sentinel推为主库。
# 
# By default the priority is 100.
# 优先级的默认值是100.
replica-priority 100

# It is possible for a master to stop accepting writes if there are less than
# N replicas connected, having a lag less or equal than M seconds.
# 如果从库中延时小于M秒的副本数量小于N个，那么主库有可能会拒绝接收写请求。
#
# The N replicas need to be in "online" state.
# N个副本需要是"online"的状态。
#
# The lag in seconds, that must be <= the specified value, is calculated from
# the last ping received from the replica, that is usually sent every second.
# 副本的延时必须<=指定的值，延时是从上次收到来自副本的ping开始算，通常ping每秒都会发送。
#
# This option does not GUARANTEE that N replicas will accept the write, but
# will limit the window of exposure for lost writes in case not enough replicas
# are available, to the specified number of seconds.
# 这个设置并不能保证有N个副本将会接收写请求，但是会限制等待足够副本连接的时间窗口的大小。
# 
# For example to require at least 3 replicas with a lag <= 10 seconds use:
# 比如，如果要求至少有3个副本的延迟<=10秒可以这样设置：
# min-replicas-to-write 3
# min-replicas-max-lag 10
#
# Setting one or the other to 0 disables the feature.
# 将其中的任何一个设置为0都会关闭这个特性。
#
# By default min-replicas-to-write is set to 0 (feature disabled) and
# min-replicas-max-lag is set to 10.
# 默认情况，min-replicas-to-write被设置为0（这会关闭这个特性）,min-replicas-max-lag
# 被设置为10.
#
# A Redis master is able to list the address and port of the attached
# replicas in different ways. For example the "INFO replication" section
# offers this information, which is used, among other tools, by
# Redis Sentinel in order to discover replica instances.
# Another place where this info is available is in the output of the
# "ROLE" command of a master.
# 一个Redis主库能够以不同的方式列出接入的副本的地址和端口。比如，"INFO replication"小节
# 提供了一些信息，这也在其他工具中间使用，也被Sentinel用来发现副本的实例。
# 另一个可以获取到这些信息的地方是主库上执行"ROLE"的输出。
#
# The listed IP and address normally reported by a replica is obtained
# in the following way:
# 副本上列出的IP和地址通常是通过下述方式获取到的：
#
#   IP: The address is auto detected by checking the peer address
#   of the socket used by the replica to connect with the master.
#   IP: 这个地址是通过检测副本与主库连接的socket中对方的地址自动获取到的。
#
#   Port: The port is communicated by the replica during the replication
#   handshake, and is normally the port that the replica is using to
#   listen for connections.
#   Port: 这个端口副本在复制时握手使用的，而且通常情况下，这个端口也是副本用来监听连接的。
#
# However when port forwarding or Network Address Translation (NAT) is
# used, the replica may be actually reachable via different IP and port
# pairs. The following two options can be used by a replica in order to
# report to its master a specific set of IP and port, so that both INFO
# and ROLE will report those values.
# 然而，如果使用了端口转发或者NAT，副本可能需要用其他的IP和port才能被访问到。接下来的两个
# 选项能够让副本告诉主库自己的IP和端口，这样INFO和ROLE都会列出副本指定的这些值。 
#
# There is no need to use both the options if you need to override just
# the port or the IP address.
# 如果只是需要覆盖端口或IP地址，没有必要两个选项都设置。
#
# replica-announce-ip 5.5.5.5
# replica-announce-port 1234

################################## SECURITY ###################################

# Require clients to issue AUTH <PASSWORD> before processing any other
# commands.  This might be useful in environments in which you do not trust
# others with access to the host running redis-server.
# 在处理客户端的命令前，需要客户端提出AUTH <PASSWORD>.如果你不信任访问redis-server的
# 这些连接时，这么做可以起到一定的作用。
#
# This should stay commented out for backward compatibility and because most
# people do not need auth (e.g. they run their own servers).
# 为了保持向后兼容，而且大多人不需要auth，所以这个选项应该被注释掉。
# 
# Warning: since Redis is pretty fast an outside user can try up to
# 150k passwords per second against a good box. This means that you should
# use a very strong password otherwise it will be very easy to break.
# 注意：因为Redis的速度很快，所以外面人如果有好的工具话可以一秒之内试150k次密码，这意味着，
# 你需要设置一个十分健壮的密码，否则可能会被轻松破译。
#
# requirepass foobared

# Command renaming.
# 命令重命名
#
# It is possible to change the name of dangerous commands in a shared
# environment. For instance the CONFIG command may be renamed into something
# hard to guess so that it will still be available for internal-use tools
# but not available for general clients.
# 你可以在一个共享的环境中通过重命名那些危险的命令来避免遭到破坏。比如，CONFIG命令可以被重命名
# 为一个很难猜测的名字，这样一些内部使用的工具依然可以使用这个命令，但是其他普通的客户端就无法使用了。
#
# Example:
#
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
#
# It is also possible to completely kill a command by renaming it into
# an empty string:
# 你也可以通过将命令重命名为空字符串来禁用命令。
#
# rename-command CONFIG ""
#
# Please note that changing the name of commands that are logged into the
# AOF file or transmitted to replicas may cause problems.
# 注意，记录在AOF文件中或者被发送到副本的重命名命令可能会产生错误。

################################### CLIENTS ####################################

# Set the max number of connected clients at the same time. By default
# this limit is set to 10000 clients, however if the Redis server is not
# able to configure the process file limit to allow for the specified limit
# the max number of allowed clients is set to the current file limit
# minus 32 (as Redis reserves a few file descriptors for internal uses).
# 设置同时连接的客户端的最大数量。默认情况下，这个数是10000.然而由于redis内部可能需要使用
# 一些文件描述符，所以连接进来的客户端数量并不是严格的能够达到设定的值，一般设定值-32的数量是可以的。
#
# Once the limit is reached Redis will close all the new connections sending
# an error 'max number of clients reached'.
# 当连接达到限制时，Redis将会关闭新到的连接，同时会发送一个'max number of clients reached'的错误。
#
# maxclients 10000

############################## MEMORY MANAGEMENT ################################

# Set a memory usage limit to the specified amount of bytes.
# When the memory limit is reached Redis will try to remove keys
# according to the eviction policy selected (see maxmemory-policy).
# 设置一个内存的使用量限制。当内存使用量达到限制时，Redis将会根据选择的回收策略试着
# 回收key(回收策略见maxmemory-policy)
#
# If Redis can't remove keys according to the policy, or if the policy is
# set to 'noeviction', Redis will start to reply with errors to commands
# that would use more memory, like SET, LPUSH, and so on, and will continue
# to reply to read-only commands like GET.
# 如果Redis根据回收策略还是不能移除key，或者回收策略被设置为不回收，Redis将会对那些将会
# 使用更多内存的命令（比如SET,LPUSH等等）返回错误，但是对只读操作会正常响应（比如GET）
#
# This option is usually useful when using Redis as an LRU or LFU cache, or to
# set a hard memory limit for an instance (using the 'noeviction' policy).
# 当使用Redis作为一个LRU或者LFU的缓存时，或者对某个实例占用内存量进行硬性限制（当使用
# 不回收内存策略时），这么做通常有所帮助。
#
# WARNING: If you have replicas attached to an instance with maxmemory on,
# the size of the output buffers needed to feed the replicas are subtracted
# from the used memory count, so that network problems / resyncs will
# not trigger a loop where keys are evicted, and in turn the output
# buffer of replicas is full with DELs of keys evicted triggering the deletion
# of more keys, and so forth until the database is completely emptied.
# 
# In short... if you have replicas attached it is suggested that you set a lower
# limit for maxmemory so that there is some free RAM on the system for replica
# output buffers (but this is not needed if the policy is 'noeviction').
# 总的来说。。如果附加了副本，建议您为maxmemory设置一个较低的值，以便系统上有一些可用的RAM用于副本
# 输出buffer
# maxmemory <bytes>

# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory
# is reached. You can select among five behaviors:
# 最大内存策略：当内存用量达到设置的最大值时，Redis如何选择哪些内存需要回收，你可以从下述5种策略中选择：
#
# volatile-lru -> Evict using approximated LRU among the keys with an expire set.
# volatile-lur 设置了过期属性的数据进行LRU筛选
# allkeys-lru -> Evict any key using approximated LRU.
# allkeys-lru  所有数据LRU
# volatile-lfu -> Evict using approximated LFU among the keys with an expire set.
# volatile-lfu 设置了过期属性的数据进行LFU筛选
# allkeys-lfu -> Evict any key using approximated LFU.
# allkeys-lfu  所有数据LFU
# volatile-random -> Remove a random key among the ones with an expire set.
# volatile-random 设置了过期属性的数据进行随机选择
# allkeys-random -> Remove a random key, any key.
# allkeys-random  所有数据随机选择
# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)
# volatile-ttl 剩余过期时间最短的key
# noeviction -> Don't evict anything, just return an error on write operations.
# noeviction   不回收任何数据，对写请求返回error
# LRU means Least Recently Used
# LRU就是最近没使用
# LFU means Least Frequently Used
# LFU就是最不频繁使用
# Both LRU, LFU and volatile-ttl are implemented using approximated
# randomized algorithms.
# LRU,LFU,volatile-ttl实现中都用了近似随机的算法
# Note: with any of the above policies, Redis will return an error on write
#       operations, when there are no suitable keys for eviction.
# 注意： 上述的几种策略，当没有合适的数据可以回收时对于写请求Redis都会返回错误。
#       At the date of writing these commands are: set setnx setex append
#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd
#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby
#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby
#       getset mset msetnx exec sort
#       
# The default is:
# 默认的策略是不进行回收
# maxmemory-policy noeviction

# LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated
# algorithms (in order to save memory), so you can tune it for speed or
# accuracy. For default Redis will check five keys and pick the one that was
# used less recently, you can change the sample size using the following
# configuration directive.
# LRU,LFU和最小TTL算法都不是精确算法而是一种近似的算法（为了节省内存），所以你可以调整它来达到
# 预期的精度与速度。默认情况下，Redis会检查5个key然后从中选择一个最近最少使用的key，你可以用
# 下面的配置来更该采样的大小
#
# The default of 5 produces good enough results. 10 Approximates very closely
# true LRU but costs more CPU. 3 is faster but not very accurate.
# 默认值5已经足够筛选出令人满意的结果了。10已经非常接近LRU算法了但是会消耗跟多的CPU，3的速度
# 更快，但是结果并不是十分准确。
#
# maxmemory-samples 5

# Starting from Redis 5, by default a replica will ignore its maxmemory setting
# (unless it is promoted to master after a failover or manually). It means
# that the eviction of keys will be just handled by the master, sending the
# DEL commands to the replica as keys evict in the master side.
#
# This behavior ensures that masters and replicas stay consistent, and is usually
# what you want, however if your replica is writable, or you want the replica to have
# a different memory setting, and you are sure all the writes performed to the
# replica are idempotent, then you may change this default (but be sure to understand
# what you are doing).
#
# Note that since the replica by default does not evict, it may end using more
# memory than the one set via maxmemory (there are certain buffers that may
# be larger on the replica, or data structures may sometimes take more memory and so
# forth). So make sure you monitor your replicas and make sure they have enough
# memory to never hit a real out-of-memory condition before the master hits
# the configured maxmemory setting.
#
# replica-ignore-maxmemory yes

############################# LAZY FREEING ####################################

# Redis has two primitives to delete keys. One is called DEL and is a blocking
# deletion of the object. It means that the server stops processing new commands
# in order to reclaim all the memory associated with an object in a synchronous
# way. If the key deleted is associated with a small object, the time needed
# in order to execute the DEL command is very small and comparable to most other
# O(1) or O(log_N) commands in Redis. However if the key is associated with an
# aggregated value containing millions of elements, the server can block for
# a long time (even seconds) in order to complete the operation.
#
# For the above reasons Redis also offers non blocking deletion primitives
# such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and
# FLUSHDB commands, in order to reclaim memory in background. Those commands
# are executed in constant time. Another thread will incrementally free the
# object in the background as fast as possible.
#
# DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.
# It's up to the design of the application to understand when it is a good
# idea to use one or the other. However the Redis server sometimes has to
# delete keys or flush the whole database as a side effect of other operations.
# Specifically Redis deletes objects independently of a user call in the
# following scenarios:
#
# 1) On eviction, because of the maxmemory and maxmemory policy configurations,
#    in order to make room for new data, without going over the specified
#    memory limit.
# 2) Because of expire: when a key with an associated time to live (see the
#    EXPIRE command) must be deleted from memory.
# 3) Because of a side effect of a command that stores data on a key that may
#    already exist. For example the RENAME command may delete the old key
#    content when it is replaced with another one. Similarly SUNIONSTORE
#    or SORT with STORE option may delete existing keys. The SET command
#    itself removes any old content of the specified key in order to replace
#    it with the specified string.
# 4) During replication, when a replica performs a full resynchronization with
#    its master, the content of the whole database is removed in order to
#    load the RDB file just transferred.
#
# In all the above cases the default is to delete objects in a blocking way,
# like if DEL was called. However you can configure each case specifically
# in order to instead release memory in a non-blocking way like if UNLINK
# was called, using the following configuration directives:

lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
replica-lazy-flush no

############################## APPEND ONLY MODE ###############################

# By default Redis asynchronously dumps the dataset on disk. This mode is
# good enough in many applications, but an issue with the Redis process or
# a power outage may result into a few minutes of writes lost (depending on
# the configured save points).
#
# The Append Only File is an alternative persistence mode that provides
# much better durability. For instance using the default data fsync policy
# (see later in the config file) Redis can lose just one second of writes in a
# dramatic event like a server power outage, or a single write if something
# wrong with the Redis process itself happens, but the operating system is
# still running correctly.
#
# AOF and RDB persistence can be enabled at the same time without problems.
# If the AOF is enabled on startup Redis will load the AOF, that is the file
# with the better durability guarantees.
#
# Please check http://redis.io/topics/persistence for more information.

appendonly no

# The name of the append only file (default: "appendonly.aof")

appendfilename "appendonly.aof"

# The fsync() call tells the Operating System to actually write data on disk
# instead of waiting for more data in the output buffer. Some OS will really flush
# data on disk, some other OS will just try to do it ASAP.
#
# Redis supports three different modes:
#
# no: don't fsync, just let the OS flush the data when it wants. Faster.
# always: fsync after every write to the append only log. Slow, Safest.
# everysec: fsync only one time every second. Compromise.
#
# The default is "everysec", as that's usually the right compromise between
# speed and data safety. It's up to you to understand if you can relax this to
# "no" that will let the operating system flush the output buffer when
# it wants, for better performances (but if you can live with the idea of
# some data loss consider the default persistence mode that's snapshotting),
# or on the contrary, use "always" that's very slow but a bit safer than
# everysec.
#
# More details please check the following article:
# http://antirez.com/post/redis-persistence-demystified.html
#
# If unsure, use "everysec".

# appendfsync always
appendfsync everysec
# appendfsync no

# When the AOF fsync policy is set to always or everysec, and a background
# saving process (a background save or AOF log background rewriting) is
# performing a lot of I/O against the disk, in some Linux configurations
# Redis may block too long on the fsync() call. Note that there is no fix for
# this currently, as even performing fsync in a different thread will block
# our synchronous write(2) call.
#
# In order to mitigate this problem it's possible to use the following option
# that will prevent fsync() from being called in the main process while a
# BGSAVE or BGREWRITEAOF is in progress.
#
# This means that while another child is saving, the durability of Redis is
# the same as "appendfsync none". In practical terms, this means that it is
# possible to lose up to 30 seconds of log in the worst scenario (with the
# default Linux settings).
#
# If you have latency problems turn this to "yes". Otherwise leave it as
# "no" that is the safest pick from the point of view of durability.

no-appendfsync-on-rewrite no

# Automatic rewrite of the append only file.
# Redis is able to automatically rewrite the log file implicitly calling
# BGREWRITEAOF when the AOF log size grows by the specified percentage.
#
# This is how it works: Redis remembers the size of the AOF file after the
# latest rewrite (if no rewrite has happened since the restart, the size of
# the AOF at startup is used).
#
# This base size is compared to the current size. If the current size is
# bigger than the specified percentage, the rewrite is triggered. Also
# you need to specify a minimal size for the AOF file to be rewritten, this
# is useful to avoid rewriting the AOF file even if the percentage increase
# is reached but it is still pretty small.
#
# Specify a percentage of zero in order to disable the automatic AOF
# rewrite feature.

auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# An AOF file may be found to be truncated at the end during the Redis
# startup process, when the AOF data gets loaded back into memory.
# This may happen when the system where Redis is running
# crashes, especially when an ext4 filesystem is mounted without the
# data=ordered option (however this can't happen when Redis itself
# crashes or aborts but the operating system still works correctly).
#
# Redis can either exit with an error when this happens, or load as much
# data as possible (the default now) and start if the AOF file is found
# to be truncated at the end. The following option controls this behavior.
#
# If aof-load-truncated is set to yes, a truncated AOF file is loaded and
# the Redis server starts emitting a log to inform the user of the event.
# Otherwise if the option is set to no, the server aborts with an error
# and refuses to start. When the option is set to no, the user requires
# to fix the AOF file using the "redis-check-aof" utility before to restart
# the server.
#
# Note that if the AOF file will be found to be corrupted in the middle
# the server will still exit with an error. This option only applies when
# Redis will try to read more data from the AOF file but not enough bytes
# will be found.
aof-load-truncated yes

# When rewriting the AOF file, Redis is able to use an RDB preamble in the
# AOF file for faster rewrites and recoveries. When this option is turned
# on the rewritten AOF file is composed of two different stanzas:
#
#   [RDB file][AOF tail]
#
# When loading Redis recognizes that the AOF file starts with the "REDIS"
# string and loads the prefixed RDB file, and continues loading the AOF
# tail.
aof-use-rdb-preamble yes

################################ LUA SCRIPTING  ###############################

# Max execution time of a Lua script in milliseconds.
#
# If the maximum execution time is reached Redis will log that a script is
# still in execution after the maximum allowed time and will start to
# reply to queries with an error.
#
# When a long running script exceeds the maximum execution time only the
# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be
# used to stop a script that did not yet called write commands. The second
# is the only way to shut down the server in the case a write command was
# already issued by the script but the user doesn't want to wait for the natural
# termination of the script.
#
# Set it to 0 or a negative value for unlimited execution without warnings.
lua-time-limit 5000

################################ REDIS CLUSTER  ###############################
#
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however
# in order to mark it as "mature" we need to wait for a non trivial percentage
# of users to deploy it in production.
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# Normal Redis instances can't be part of a Redis Cluster; only nodes that are
# started as cluster nodes can. In order to start a Redis instance as a
# cluster node enable the cluster support uncommenting the following:
#
# cluster-enabled yes

# Every cluster node has a cluster configuration file. This file is not
# intended to be edited by hand. It is created and updated by Redis nodes.
# Every Redis Cluster node requires a different cluster configuration file.
# Make sure that instances running in the same system do not have
# overlapping cluster configuration file names.
#
# cluster-config-file nodes-6379.conf

# Cluster node timeout is the amount of milliseconds a node must be unreachable
# for it to be considered in failure state.
# Most other internal time limits are multiple of the node timeout.
#
# cluster-node-timeout 15000

# A replica of a failing master will avoid to start a failover if its data
# looks too old.
#
# There is no simple way for a replica to actually have an exact measure of
# its "data age", so the following two checks are performed:
#
# 1) If there are multiple replicas able to failover, they exchange messages
#    in order to try to give an advantage to the replica with the best
#    replication offset (more data from the master processed).
#    Replicas will try to get their rank by offset, and apply to the start
#    of the failover a delay proportional to their rank.
#
# 2) Every single replica computes the time of the last interaction with
#    its master. This can be the last ping or command received (if the master
#    is still in the "connected" state), or the time that elapsed since the
#    disconnection with the master (if the replication link is currently down).
#    If the last interaction is too old, the replica will not try to failover
#    at all.
#
# The point "2" can be tuned by user. Specifically a replica will not perform
# the failover if, since the last interaction with the master, the time
# elapsed is greater than:
#
#   (node-timeout * replica-validity-factor) + repl-ping-replica-period
#
# So for example if node-timeout is 30 seconds, and the replica-validity-factor
# is 10, and assuming a default repl-ping-replica-period of 10 seconds, the
# replica will not try to failover if it was not able to talk with the master
# for longer than 310 seconds.
#
# A large replica-validity-factor may allow replicas with too old data to failover
# a master, while a too small value may prevent the cluster from being able to
# elect a replica at all.
#
# For maximum availability, it is possible to set the replica-validity-factor
# to a value of 0, which means, that replicas will always try to failover the
# master regardless of the last time they interacted with the master.
# (However they'll always try to apply a delay proportional to their
# offset rank).
#
# Zero is the only value able to guarantee that when all the partitions heal
# the cluster will always be able to continue.
#
# cluster-replica-validity-factor 10

# Cluster replicas are able to migrate to orphaned masters, that are masters
# that are left without working replicas. This improves the cluster ability
# to resist to failures as otherwise an orphaned master can't be failed over
# in case of failure if it has no working replicas.
#
# Replicas migrate to orphaned masters only if there are still at least a
# given number of other working replicas for their old master. This number
# is the "migration barrier". A migration barrier of 1 means that a replica
# will migrate only if there is at least 1 other working replica for its master
# and so forth. It usually reflects the number of replicas you want for every
# master in your cluster.
#
# Default is 1 (replicas migrate only if their masters remain with at least
# one replica). To disable migration just set it to a very large value.
# A value of 0 can be set but is useful only for debugging and dangerous
# in production.
#
# cluster-migration-barrier 1

# By default Redis Cluster nodes stop accepting queries if they detect there
# is at least an hash slot uncovered (no available node is serving it).
# This way if the cluster is partially down (for example a range of hash slots
# are no longer covered) all the cluster becomes, eventually, unavailable.
# It automatically returns available as soon as all the slots are covered again.
#
# However sometimes you want the subset of the cluster which is working,
# to continue to accept queries for the part of the key space that is still
# covered. In order to do so, just set the cluster-require-full-coverage
# option to no.
#
# cluster-require-full-coverage yes

# This option, when set to yes, prevents replicas from trying to failover its
# master during master failures. However the master can still perform a
# manual failover, if forced to do so.
#
# This is useful in different scenarios, especially in the case of multiple
# data center operations, where we want one side to never be promoted if not
# in the case of a total DC failure.
#
# cluster-replica-no-failover no

# In order to setup your cluster make sure to read the documentation
# available at http://redis.io web site.

########################## CLUSTER DOCKER/NAT support  ########################

# In certain deployments, Redis Cluster nodes address discovery fails, because
# addresses are NAT-ted or because ports are forwarded (the typical case is
# Docker and other containers).
#
# In order to make Redis Cluster working in such environments, a static
# configuration where each node knows its public address is needed. The
# following two options are used for this scope, and are:
#
# * cluster-announce-ip
# * cluster-announce-port
# * cluster-announce-bus-port
#
# Each instruct the node about its address, client port, and cluster message
# bus port. The information is then published in the header of the bus packets
# so that other nodes will be able to correctly map the address of the node
# publishing the information.
#
# If the above options are not used, the normal Redis Cluster auto-detection
# will be used instead.
#
# Note that when remapped, the bus port may not be at the fixed offset of
# clients port + 10000, so you can specify any port and bus-port depending
# on how they get remapped. If the bus-port is not set, a fixed offset of
# 10000 will be used as usually.
#
# Example:
#
# cluster-announce-ip 10.1.1.5
# cluster-announce-port 6379
# cluster-announce-bus-port 6380

################################## SLOW LOG ###################################

# The Redis Slow Log is a system to log queries that exceeded a specified
# execution time. The execution time does not include the I/O operations
# like talking with the client, sending the reply and so forth,
# but just the time needed to actually execute the command (this is the only
# stage of command execution where the thread is blocked and can not serve
# other requests in the meantime).
#
# You can configure the slow log with two parameters: one tells Redis
# what is the execution time, in microseconds, to exceed in order for the
# command to get logged, and the other parameter is the length of the
# slow log. When a new command is logged the oldest one is removed from the
# queue of logged commands.

# The following time is expressed in microseconds, so 1000000 is equivalent
# to one second. Note that a negative number disables the slow log, while
# a value of zero forces the logging of every command.
slowlog-log-slower-than 10000

# There is no limit to this length. Just be aware that it will consume memory.
# You can reclaim memory used by the slow log with SLOWLOG RESET.
slowlog-max-len 128

################################ LATENCY MONITOR ##############################

# The Redis latency monitoring subsystem samples different operations
# at runtime in order to collect data related to possible sources of
# latency of a Redis instance.
#
# Via the LATENCY command this information is available to the user that can
# print graphs and obtain reports.
#
# The system only logs operations that were performed in a time equal or
# greater than the amount of milliseconds specified via the
# latency-monitor-threshold configuration directive. When its value is set
# to zero, the latency monitor is turned off.
#
# By default latency monitoring is disabled since it is mostly not needed
# if you don't have latency issues, and collecting data has a performance
# impact, that while very small, can be measured under big load. Latency
# monitoring can easily be enabled at runtime using the command
# "CONFIG SET latency-monitor-threshold <milliseconds>" if needed.
latency-monitor-threshold 0

############################# EVENT NOTIFICATION ##############################

# Redis can notify Pub/Sub clients about events happening in the key space.
# This feature is documented at http://redis.io/topics/notifications
#
# For instance if keyspace events notification is enabled, and a client
# performs a DEL operation on key "foo" stored in the Database 0, two
# messages will be published via Pub/Sub:
#
# PUBLISH __keyspace@0__:foo del
# PUBLISH __keyevent@0__:del foo
#
# It is possible to select the events that Redis will notify among a set
# of classes. Every class is identified by a single character:
#
#  K     Keyspace events, published with __keyspace@<db>__ prefix.
#  E     Keyevent events, published with __keyevent@<db>__ prefix.
#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
#  $     String commands
#  l     List commands
#  s     Set commands
#  h     Hash commands
#  z     Sorted set commands
#  x     Expired events (events generated every time a key expires)
#  e     Evicted events (events generated when a key is evicted for maxmemory)
#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.
#
#  The "notify-keyspace-events" takes as argument a string that is composed
#  of zero or multiple characters. The empty string means that notifications
#  are disabled.
#
#  Example: to enable list and generic events, from the point of view of the
#           event name, use:
#
#  notify-keyspace-events Elg
#
#  Example 2: to get the stream of the expired keys subscribing to channel
#             name __keyevent@0__:expired use:
#
#  notify-keyspace-events Ex
#
#  By default all notifications are disabled because most users don't need
#  this feature and the feature has some overhead. Note that if you don't
#  specify at least one of K or E, no events will be delivered.
notify-keyspace-events ""

############################### ADVANCED CONFIG ###############################

# Hashes are encoded using a memory efficient data structure when they have a
# small number of entries, and the biggest entry does not exceed a given
# threshold. These thresholds can be configured using the following directives.
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# Lists are also encoded in a special way to save a lot of space.
# The number of entries allowed per internal list node can be specified
# as a fixed maximum size or a maximum number of elements.
# For a fixed maximum size, use -5 through -1, meaning:
# -5: max size: 64 Kb  <-- not recommended for normal workloads
# -4: max size: 32 Kb  <-- not recommended
# -3: max size: 16 Kb  <-- probably not recommended
# -2: max size: 8 Kb   <-- good
# -1: max size: 4 Kb   <-- good
# Positive numbers mean store up to _exactly_ that number of elements
# per list node.
# The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),
# but if your use case is unique, adjust the settings as necessary.
list-max-ziplist-size -2

# Lists may also be compressed.
# Compress depth is the number of quicklist ziplist nodes from *each* side of
# the list to *exclude* from compression.  The head and tail of the list
# are always uncompressed for fast push/pop operations.  Settings are:
# 0: disable all list compression
# 1: depth 1 means "don't start compressing until after 1 node into the list,
#    going from either the head or tail"
#    So: [head]->node->node->...->node->[tail]
#    [head], [tail] will always be uncompressed; inner nodes will compress.
# 2: [head]->[next]->node->node->...->node->[prev]->[tail]
#    2 here means: don't compress head or head->next or tail->prev or tail,
#    but compress all nodes between them.
# 3: [head]->[next]->[next]->node->node->...->node->[prev]->[prev]->[tail]
# etc.
list-compress-depth 0

# Sets have a special encoding in just one case: when a set is composed
# of just strings that happen to be integers in radix 10 in the range
# of 64 bit signed integers.
# The following configuration setting sets the limit in the size of the
# set in order to use this special memory saving encoding.
set-max-intset-entries 512

# Similarly to hashes and lists, sorted sets are also specially encoded in
# order to save a lot of space. This encoding is only used when the length and
# elements of a sorted set are below the following limits:
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog sparse representation bytes limit. The limit includes the
# 16 bytes header. When an HyperLogLog using the sparse representation crosses
# this limit, it is converted into the dense representation.
#
# A value greater than 16000 is totally useless, since at that point the
# dense representation is more memory efficient.
#
# The suggested value is ~ 3000 in order to have the benefits of
# the space efficient encoding without slowing down too much PFADD,
# which is O(N) with the sparse encoding. The value can be raised to
# ~ 10000 when CPU is not a concern, but space is, and the data set is
# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.
hll-sparse-max-bytes 3000

# Streams macro node max size / items. The stream data structure is a radix
# tree of big nodes that encode multiple items inside. Using this configuration
# it is possible to configure how big a single node can be in bytes, and the
# maximum number of items it may contain before switching to a new node when
# appending new stream entries. If any of the following settings are set to
# zero, the limit is ignored, so for instance it is possible to set just a
# max entires limit by setting max-bytes to 0 and max-entries to the desired
# value.
stream-node-max-bytes 4096
stream-node-max-entries 100

# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
# order to help rehashing the main Redis hash table (the one mapping top-level
# keys to values). The hash table implementation Redis uses (see dict.c)
# performs a lazy rehashing: the more operation you run into a hash table
# that is rehashing, the more rehashing "steps" are performed, so if the
# server is idle the rehashing is never complete and some more memory is used
# by the hash table.
#
# The default is to use this millisecond 10 times every second in order to
# actively rehash the main dictionaries, freeing memory when possible.
#
# If unsure:
# use "activerehashing no" if you have hard latency requirements and it is
# not a good thing in your environment that Redis can reply from time to time
# to queries with 2 milliseconds delay.
#
# use "activerehashing yes" if you don't have such hard requirements but
# want to free memory asap when possible.
activerehashing yes

# The client output buffer limits can be used to force disconnection of clients
# that are not reading data from the server fast enough for some reason (a
# common reason is that a Pub/Sub client can't consume messages as fast as the
# publisher can produce them).
#
# The limit can be set differently for the three different classes of clients:
#
# normal -> normal clients including MONITOR clients
# replica  -> replica clients
# pubsub -> clients subscribed to at least one pubsub channel or pattern
#
# The syntax of every client-output-buffer-limit directive is the following:
#
# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>
#
# A client is immediately disconnected once the hard limit is reached, or if
# the soft limit is reached and remains reached for the specified number of
# seconds (continuously).
# So for instance if the hard limit is 32 megabytes and the soft limit is
# 16 megabytes / 10 seconds, the client will get disconnected immediately
# if the size of the output buffers reach 32 megabytes, but will also get
# disconnected if the client reaches 16 megabytes and continuously overcomes
# the limit for 10 seconds.
#
# By default normal clients are not limited because they don't receive data
# without asking (in a push way), but just after a request, so only
# asynchronous clients may create a scenario where data is requested faster
# than it can read.
#
# Instead there is a default limit for pubsub and replica clients, since
# subscribers and replicas receive data in a push fashion.
#
# Both the hard or the soft limit can be disabled by setting them to zero.
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Client query buffers accumulate new commands. They are limited to a fixed
# amount by default in order to avoid that a protocol desynchronization (for
# instance due to a bug in the client) will lead to unbound memory usage in
# the query buffer. However you can configure it here if you have very special
# needs, such us huge multi/exec requests or alike.
#
# client-query-buffer-limit 1gb

# In the Redis protocol, bulk requests, that are, elements representing single
# strings, are normally limited ot 512 mb. However you can change this limit
# here.
#
# proto-max-bulk-len 512mb

# Redis calls an internal function to perform many background tasks, like
# closing connections of clients in timeout, purging expired keys that are
# never requested, and so forth.
#
# Not all tasks are performed with the same frequency, but Redis checks for
# tasks to perform according to the specified "hz" value.
#
# By default "hz" is set to 10. Raising the value will use more CPU when
# Redis is idle, but at the same time will make Redis more responsive when
# there are many keys expiring at the same time, and timeouts may be
# handled with more precision.
#
# The range is between 1 and 500, however a value over 100 is usually not
# a good idea. Most users should use the default of 10 and raise this up to
# 100 only in environments where very low latency is required.
hz 10

# Normally it is useful to have an HZ value which is proportional to the
# number of clients connected. This is useful in order, for instance, to
# avoid too many clients are processed for each background task invocation
# in order to avoid latency spikes.
#
# Since the default HZ value by default is conservatively set to 10, Redis
# offers, and enables by default, the ability to use an adaptive HZ value
# which will temporary raise when there are many connected clients.
#
# When dynamic HZ is enabled, the actual configured HZ will be used as
# as a baseline, but multiples of the configured HZ value will be actually
# used as needed once more clients are connected. In this way an idle
# instance will use very little CPU time while a busy instance will be
# more responsive.
dynamic-hz yes

# When a child rewrites the AOF file, if the following option is enabled
# the file will be fsync-ed every 32 MB of data generated. This is useful
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes.
aof-rewrite-incremental-fsync yes

# When redis saves RDB file, if the following option is enabled
# the file will be fsync-ed every 32 MB of data generated. This is useful
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes.
rdb-save-incremental-fsync yes

# Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good
# idea to start with the default settings and only change them after investigating
# how to improve the performances and how the keys LFU change over time, which
# is possible to inspect via the OBJECT FREQ command.
#
# There are two tunable parameters in the Redis LFU implementation: the
# counter logarithm factor and the counter decay time. It is important to
# understand what the two parameters mean before changing them.
#
# The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis
# uses a probabilistic increment with logarithmic behavior. Given the value
# of the old counter, when a key is accessed, the counter is incremented in
# this way:
#
# 1. A random number R between 0 and 1 is extracted.
# 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).
# 3. The counter is incremented only if R < P.
#
# The default lfu-log-factor is 10. This is a table of how the frequency
# counter changes with a different number of accesses with different
# logarithmic factors:
#
# +--------+------------+------------+------------+------------+------------+
# | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |
# +--------+------------+------------+------------+------------+------------+
# | 0      | 104        | 255        | 255        | 255        | 255        |
# +--------+------------+------------+------------+------------+------------+
# | 1      | 18         | 49         | 255        | 255        | 255        |
# +--------+------------+------------+------------+------------+------------+
# | 10     | 10         | 18         | 142        | 255        | 255        |
# +--------+------------+------------+------------+------------+------------+
# | 100    | 8          | 11         | 49         | 143        | 255        |
# +--------+------------+------------+------------+------------+------------+
#
# NOTE: The above table was obtained by running the following commands:
#
#   redis-benchmark -n 1000000 incr foo
#   redis-cli object freq foo
#
# NOTE 2: The counter initial value is 5 in order to give new objects a chance
# to accumulate hits.
#
# The counter decay time is the time, in minutes, that must elapse in order
# for the key counter to be divided by two (or decremented if it has a value
# less <= 10).
#
# The default value for the lfu-decay-time is 1. A Special value of 0 means to
# decay the counter every time it happens to be scanned.
#
# lfu-log-factor 10
# lfu-decay-time 1

########################### ACTIVE DEFRAGMENTATION #######################
#
# WARNING THIS FEATURE IS EXPERIMENTAL. However it was stress tested
# even in production and manually tested by multiple engineers for some
# time.
#
# What is active defragmentation?
# -------------------------------
#
# Active (online) defragmentation allows a Redis server to compact the
# spaces left between small allocations and deallocations of data in memory,
# thus allowing to reclaim back memory.
#
# Fragmentation is a natural process that happens with every allocator (but
# less so with Jemalloc, fortunately) and certain workloads. Normally a server
# restart is needed in order to lower the fragmentation, or at least to flush
# away all the data and create it again. However thanks to this feature
# implemented by Oran Agra for Redis 4.0 this process can happen at runtime
# in an "hot" way, while the server is running.
#
# Basically when the fragmentation is over a certain level (see the
# configuration options below) Redis will start to create new copies of the
# values in contiguous memory regions by exploiting certain specific Jemalloc
# features (in order to understand if an allocation is causing fragmentation
# and to allocate it in a better place), and at the same time, will release the
# old copies of the data. This process, repeated incrementally for all the keys
# will cause the fragmentation to drop back to normal values.
#
# Important things to understand:
#
# 1. This feature is disabled by default, and only works if you compiled Redis
#    to use the copy of Jemalloc we ship with the source code of Redis.
#    This is the default with Linux builds.
#
# 2. You never need to enable this feature if you don't have fragmentation
#    issues.
#
# 3. Once you experience fragmentation, you can enable this feature when
#    needed with the command "CONFIG SET activedefrag yes".
#
# The configuration parameters are able to fine tune the behavior of the
# defragmentation process. If you are not sure about what they mean it is
# a good idea to leave the defaults untouched.

# Enabled active defragmentation
# activedefrag yes

# Minimum amount of fragmentation waste to start active defrag
# active-defrag-ignore-bytes 100mb

# Minimum percentage of fragmentation to start active defrag
# active-defrag-threshold-lower 10

# Maximum percentage of fragmentation at which we use maximum effort
# active-defrag-threshold-upper 100

# Minimal effort for defrag in CPU percentage
# active-defrag-cycle-min 5

# Maximal effort for defrag in CPU percentage
# active-defrag-cycle-max 75

# Maximum number of set/hash/zset/list fields that will be processed from
# the main dictionary scan
# active-defrag-max-scan-fields 1000

```
